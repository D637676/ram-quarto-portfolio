## Welcome to My Portfolio! 
Hello! My nickname is Ram. This is my Quarto data visualization portfolio showcasing my Python and matplotlib skills.


## About This Portfolio
This portfolio demonstrates how Quarto can seamlessly integrate Python code and visualiza-tions into professional documents. Each chart below is created using matplotlib and embedded directly into this document.

## What is Matplotlib?
Matplotlib is a widely-used Python plotting library for creating static, animated, and interactive visualizations. It provides a low-level, flexible API for building line charts, bar charts, scatter plots, histograms, heatmaps, and more. Matplotlib integrates well with NumPy and pandas, is highly customizable (colors, styles, annotations), and is ideal for exploratory data analysis, publishing figures, and embedding visuals into reports and documents.

## Simple Line Chart
Let’s create a simple line chart showing some sample data:

```{python}
import matplotlib.pyplot as plt
import numpy as np

# Create sample data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create the plot
plt.figure(figsize=(7, 4.75))
plt.plot(x, y, 'b-', linewidth=2, label='sin(x)')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.title('My First Matplotlib Chart')
plt.grid(True, alpha=0.3)
plt.legend()
plt.show()
```


## Bar Chart Example
Here’s a bar chart showing some sample data:

```{python}
# Sample data for bar chart
categories = ['A', 'B', 'C', 'D', 'E']
values = [23, 45, 56, 78, 32]

plt.figure(figsize=(7, 4.75))
bars = plt.bar(categories, values, color=['red', 'green', 'blue', 'orange', 'purple'])
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Sample Bar Chart')

# Add value labels on bars
for bar, value in zip(bars, values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 1, str(value), ha='center', va='bottom')

plt.show()
```


## Scatter Plot Example
Added a "Scatter Plot Example" section with a Python code block that generates and displays a random scatter plot using NumPy and matplotlib.

```{python}
# Scatter plot example: random data points
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(42)
# Generate random data
x = np.random.normal(loc=0.0, scale=1.0, size=150)
y = np.random.normal(loc=0.5, scale=1.2, size=150)
colors = np.random.rand(150)
sizes = 40 * (np.random.rand(150) + 0.5)

plt.figure(figsize=(7, 4.75))
scatter = plt.scatter(x, y, c=colors, s=sizes, cmap='viridis', alpha=0.75, edgecolors='w', linewidth=0.5)
plt.colorbar(scatter, label='Color scale')
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Random Scatter Plot')
plt.grid(True, alpha=0.3)
plt.show()
```

## Explain what matplotlib is and why it’s useful

Matplotlib is a widely used Python plotting library for creating 2D (and some 3D) visualizations. It provides both a simple state-based interface (pyplot) and a more powerful object-oriented API for fine-grained control over figures.

Why it’s useful

Flexible: supports lines, bars, scatter, histograms, heatmaps, contour plots, etc.
Highly customizable: colors, styles, annotations, subplots, axes, and precise layout control for publication-quality figures.
Integrates with the Python data stack: works naturally with NumPy and pandas for data manipulation and plotting.
Multiple outputs and backends: renders in Jupyter/Quarto, GUIs, or saves to PNG, PDF, SVG, EPS for reports and papers.
Great for exploratory data analysis and reproducible reports: code-driven plots can be embedded in documents (Quarto, notebooks) so visuals and code stay together.
Mature & extensible: large community, many examples, and plugins (Seaborn, mpl_toolkits) built on top of it.

## Pie Chart Example
Added a "Pie Chart Example" section with a Python code block that creates a pie (donut) chart showing sample categorical proportions. Render the Quarto document to view it. Need any styling changes?

```{python}
# Pie chart example
import matplotlib.pyplot as plt

labels = ['Category A', 'Category B', 'Category C', 'Category D']
sizes = [35, 30, 20, 15]
explode = (0.1, 0, 0, 0)  # explode the first slice
colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99']

plt.figure(figsize=(6,6))
plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, pctdistance=0.85)
# draw circle for donut look (optional)
centre_circle = plt.Circle((0,0),0.70,fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.title('Sample Pie Chart')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()
```
